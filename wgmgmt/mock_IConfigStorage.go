// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package wgmgmt is a generated GoMock package.
package wgmgmt

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIWgmgmtService is a mock of IWgmgmtService interface.
type MockIWgmgmtService struct {
	ctrl     *gomock.Controller
	recorder *MockIWgmgmtServiceMockRecorder
}

// MockIWgmgmtServiceMockRecorder is the mock recorder for MockIWgmgmtService.
type MockIWgmgmtServiceMockRecorder struct {
	mock *MockIWgmgmtService
}

// NewMockIWgmgmtService creates a new mock instance.
func NewMockIWgmgmtService(ctrl *gomock.Controller) *MockIWgmgmtService {
	mock := &MockIWgmgmtService{ctrl: ctrl}
	mock.recorder = &MockIWgmgmtServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIWgmgmtService) EXPECT() *MockIWgmgmtServiceMockRecorder {
	return m.recorder
}

// AddClient mocks base method.
func (m *MockIWgmgmtService) AddClient(client Client, autoKeyGen bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddClient", client, autoKeyGen)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddClient indicates an expected call of AddClient.
func (mr *MockIWgmgmtServiceMockRecorder) AddClient(client, autoKeyGen interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddClient", reflect.TypeOf((*MockIWgmgmtService)(nil).AddClient), client, autoKeyGen)
}

// AddServer mocks base method.
func (m *MockIWgmgmtService) AddServer(server Server, autoKeyGen bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddServer", server, autoKeyGen)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddServer indicates an expected call of AddServer.
func (mr *MockIWgmgmtServiceMockRecorder) AddServer(server, autoKeyGen interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddServer", reflect.TypeOf((*MockIWgmgmtService)(nil).AddServer), server, autoKeyGen)
}

// GetAllClient mocks base method.
func (m *MockIWgmgmtService) GetAllClient() []Client {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllClient")
	ret0, _ := ret[0].([]Client)
	return ret0
}

// GetAllClient indicates an expected call of GetAllClient.
func (mr *MockIWgmgmtServiceMockRecorder) GetAllClient() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllClient", reflect.TypeOf((*MockIWgmgmtService)(nil).GetAllClient))
}

// GetClient mocks base method.
func (m *MockIWgmgmtService) GetClient(clientID string) (Client, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClient", clientID)
	ret0, _ := ret[0].(Client)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClient indicates an expected call of GetClient.
func (mr *MockIWgmgmtServiceMockRecorder) GetClient(clientID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClient", reflect.TypeOf((*MockIWgmgmtService)(nil).GetClient), clientID)
}

// GetClientConfig mocks base method.
func (m *MockIWgmgmtService) GetClientConfig(clientID string) (string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClientConfig", clientID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetClientConfig indicates an expected call of GetClientConfig.
func (mr *MockIWgmgmtServiceMockRecorder) GetClientConfig(clientID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClientConfig", reflect.TypeOf((*MockIWgmgmtService)(nil).GetClientConfig), clientID)
}

// GetPeerInfo mocks base method.
func (m *MockIWgmgmtService) GetPeerInfo() ([]ClientStat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPeerInfo")
	ret0, _ := ret[0].([]ClientStat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPeerInfo indicates an expected call of GetPeerInfo.
func (mr *MockIWgmgmtServiceMockRecorder) GetPeerInfo() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPeerInfo", reflect.TypeOf((*MockIWgmgmtService)(nil).GetPeerInfo))
}

// GetServer mocks base method.
func (m *MockIWgmgmtService) GetServer() Server {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServer")
	ret0, _ := ret[0].(Server)
	return ret0
}

// GetServer indicates an expected call of GetServer.
func (mr *MockIWgmgmtServiceMockRecorder) GetServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServer", reflect.TypeOf((*MockIWgmgmtService)(nil).GetServer))
}

// ReloadServer mocks base method.
func (m *MockIWgmgmtService) ReloadServer() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReloadServer")
	ret0, _ := ret[0].(error)
	return ret0
}

// ReloadServer indicates an expected call of ReloadServer.
func (mr *MockIWgmgmtServiceMockRecorder) ReloadServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReloadServer", reflect.TypeOf((*MockIWgmgmtService)(nil).ReloadServer))
}

// RemoveClient mocks base method.
func (m *MockIWgmgmtService) RemoveClient(arg0 Client) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveClient", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveClient indicates an expected call of RemoveClient.
func (mr *MockIWgmgmtServiceMockRecorder) RemoveClient(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveClient", reflect.TypeOf((*MockIWgmgmtService)(nil).RemoveClient), arg0)
}

// SetclientAvailability mocks base method.
func (m *MockIWgmgmtService) SetclientAvailability(clientID string, availability bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetclientAvailability", clientID, availability)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetclientAvailability indicates an expected call of SetclientAvailability.
func (mr *MockIWgmgmtServiceMockRecorder) SetclientAvailability(clientID, availability interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetclientAvailability", reflect.TypeOf((*MockIWgmgmtService)(nil).SetclientAvailability), clientID, availability)
}

// StartServer mocks base method.
func (m *MockIWgmgmtService) StartServer() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartServer")
	ret0, _ := ret[0].(error)
	return ret0
}

// StartServer indicates an expected call of StartServer.
func (mr *MockIWgmgmtServiceMockRecorder) StartServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartServer", reflect.TypeOf((*MockIWgmgmtService)(nil).StartServer))
}

// StopServer mocks base method.
func (m *MockIWgmgmtService) StopServer() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopServer")
	ret0, _ := ret[0].(error)
	return ret0
}

// StopServer indicates an expected call of StopServer.
func (mr *MockIWgmgmtServiceMockRecorder) StopServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopServer", reflect.TypeOf((*MockIWgmgmtService)(nil).StopServer))
}

// UpdateClient mocks base method.
func (m *MockIWgmgmtService) UpdateClient(arg0 Client) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateClient", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateClient indicates an expected call of UpdateClient.
func (mr *MockIWgmgmtServiceMockRecorder) UpdateClient(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateClient", reflect.TypeOf((*MockIWgmgmtService)(nil).UpdateClient), arg0)
}

// UpdateServer mocks base method.
func (m *MockIWgmgmtService) UpdateServer(server Server) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateServer", server)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateServer indicates an expected call of UpdateServer.
func (mr *MockIWgmgmtServiceMockRecorder) UpdateServer(server interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateServer", reflect.TypeOf((*MockIWgmgmtService)(nil).UpdateServer), server)
}

// UsedTunelIPS mocks base method.
func (m *MockIWgmgmtService) UsedTunelIPS() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UsedTunelIPS")
	ret0, _ := ret[0].([]string)
	return ret0
}

// UsedTunelIPS indicates an expected call of UsedTunelIPS.
func (mr *MockIWgmgmtServiceMockRecorder) UsedTunelIPS() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UsedTunelIPS", reflect.TypeOf((*MockIWgmgmtService)(nil).UsedTunelIPS))
}

// WgStatus mocks base method.
func (m *MockIWgmgmtService) WgStatus() ServerStatus {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WgStatus")
	ret0, _ := ret[0].(ServerStatus)
	return ret0
}

// WgStatus indicates an expected call of WgStatus.
func (mr *MockIWgmgmtServiceMockRecorder) WgStatus() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WgStatus", reflect.TypeOf((*MockIWgmgmtService)(nil).WgStatus))
}

// MockIConfigStorage is a mock of IConfigStorage interface.
type MockIConfigStorage struct {
	ctrl     *gomock.Controller
	recorder *MockIConfigStorageMockRecorder
}

// MockIConfigStorageMockRecorder is the mock recorder for MockIConfigStorage.
type MockIConfigStorageMockRecorder struct {
	mock *MockIConfigStorage
}

// NewMockIConfigStorage creates a new mock instance.
func NewMockIConfigStorage(ctrl *gomock.Controller) *MockIConfigStorage {
	mock := &MockIConfigStorage{ctrl: ctrl}
	mock.recorder = &MockIConfigStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIConfigStorage) EXPECT() *MockIConfigStorageMockRecorder {
	return m.recorder
}

// AddClient mocks base method.
func (m *MockIConfigStorage) AddClient(arg0 Client) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddClient", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddClient indicates an expected call of AddClient.
func (mr *MockIConfigStorageMockRecorder) AddClient(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddClient", reflect.TypeOf((*MockIConfigStorage)(nil).AddClient), arg0)
}

// AllClient mocks base method.
func (m *MockIConfigStorage) AllClient() []Client {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllClient")
	ret0, _ := ret[0].([]Client)
	return ret0
}

// AllClient indicates an expected call of AllClient.
func (mr *MockIConfigStorageMockRecorder) AllClient() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllClient", reflect.TypeOf((*MockIConfigStorage)(nil).AllClient))
}

// AllTraffic mocks base method.
func (m *MockIConfigStorage) AllTraffic() (int64, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllTraffic")
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// AllTraffic indicates an expected call of AllTraffic.
func (mr *MockIConfigStorageMockRecorder) AllTraffic() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllTraffic", reflect.TypeOf((*MockIConfigStorage)(nil).AllTraffic))
}

// ClientByID mocks base method.
func (m *MockIConfigStorage) ClientByID(clientID string) (Client, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClientByID", clientID)
	ret0, _ := ret[0].(Client)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ClientByID indicates an expected call of ClientByID.
func (mr *MockIConfigStorageMockRecorder) ClientByID(clientID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClientByID", reflect.TypeOf((*MockIConfigStorage)(nil).ClientByID), clientID)
}

// ClientNumber mocks base method.
func (m *MockIConfigStorage) ClientNumber() (int, int) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClientNumber")
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(int)
	return ret0, ret1
}

// ClientNumber indicates an expected call of ClientNumber.
func (mr *MockIConfigStorageMockRecorder) ClientNumber() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClientNumber", reflect.TypeOf((*MockIConfigStorage)(nil).ClientNumber))
}

// ClientTrafficByIP mocks base method.
func (m *MockIConfigStorage) ClientTrafficByIP(clientIP string) (int64, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClientTrafficByIP", clientIP)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ClientTrafficByIP indicates an expected call of ClientTrafficByIP.
func (mr *MockIConfigStorageMockRecorder) ClientTrafficByIP(clientIP interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClientTrafficByIP", reflect.TypeOf((*MockIConfigStorage)(nil).ClientTrafficByIP), clientIP)
}

// GetServerConfig mocks base method.
func (m *MockIConfigStorage) GetServerConfig() Server {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServerConfig")
	ret0, _ := ret[0].(Server)
	return ret0
}

// GetServerConfig indicates an expected call of GetServerConfig.
func (mr *MockIConfigStorageMockRecorder) GetServerConfig() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServerConfig", reflect.TypeOf((*MockIConfigStorage)(nil).GetServerConfig))
}

// RemoveClient mocks base method.
func (m *MockIConfigStorage) RemoveClient(arg0 Client) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveClient", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveClient indicates an expected call of RemoveClient.
func (mr *MockIConfigStorageMockRecorder) RemoveClient(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveClient", reflect.TypeOf((*MockIConfigStorage)(nil).RemoveClient), arg0)
}

// SaveServerConfig mocks base method.
func (m *MockIConfigStorage) SaveServerConfig(arg0 Server) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveServerConfig", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveServerConfig indicates an expected call of SaveServerConfig.
func (mr *MockIConfigStorageMockRecorder) SaveServerConfig(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveServerConfig", reflect.TypeOf((*MockIConfigStorage)(nil).SaveServerConfig), arg0)
}

// UpdateClient mocks base method.
func (m *MockIConfigStorage) UpdateClient(arg0 Client) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateClient", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateClient indicates an expected call of UpdateClient.
func (mr *MockIConfigStorageMockRecorder) UpdateClient(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateClient", reflect.TypeOf((*MockIConfigStorage)(nil).UpdateClient), arg0)
}

// UsedPrivateIPS mocks base method.
func (m *MockIConfigStorage) UsedPrivateIPS() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UsedPrivateIPS")
	ret0, _ := ret[0].([]string)
	return ret0
}

// UsedPrivateIPS indicates an expected call of UsedPrivateIPS.
func (mr *MockIConfigStorageMockRecorder) UsedPrivateIPS() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UsedPrivateIPS", reflect.TypeOf((*MockIConfigStorage)(nil).UsedPrivateIPS))
}

// MockILogger is a mock of ILogger interface.
type MockILogger struct {
	ctrl     *gomock.Controller
	recorder *MockILoggerMockRecorder
}

// MockILoggerMockRecorder is the mock recorder for MockILogger.
type MockILoggerMockRecorder struct {
	mock *MockILogger
}

// NewMockILogger creates a new mock instance.
func NewMockILogger(ctrl *gomock.Controller) *MockILogger {
	mock := &MockILogger{ctrl: ctrl}
	mock.recorder = &MockILoggerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockILogger) EXPECT() *MockILoggerMockRecorder {
	return m.recorder
}

// Debuglog mocks base method.
func (m *MockILogger) Debuglog(msg string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Debuglog", msg)
}

// Debuglog indicates an expected call of Debuglog.
func (mr *MockILoggerMockRecorder) Debuglog(msg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Debuglog", reflect.TypeOf((*MockILogger)(nil).Debuglog), msg)
}

// ErrorLog mocks base method.
func (m *MockILogger) ErrorLog(msg string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ErrorLog", msg)
}

// ErrorLog indicates an expected call of ErrorLog.
func (mr *MockILoggerMockRecorder) ErrorLog(msg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ErrorLog", reflect.TypeOf((*MockILogger)(nil).ErrorLog), msg)
}

// FatalLog mocks base method.
func (m *MockILogger) FatalLog(msg string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "FatalLog", msg)
}

// FatalLog indicates an expected call of FatalLog.
func (mr *MockILoggerMockRecorder) FatalLog(msg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FatalLog", reflect.TypeOf((*MockILogger)(nil).FatalLog), msg)
}

// Infolog mocks base method.
func (m *MockILogger) Infolog(msg string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Infolog", msg)
}

// Infolog indicates an expected call of Infolog.
func (mr *MockILoggerMockRecorder) Infolog(msg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Infolog", reflect.TypeOf((*MockILogger)(nil).Infolog), msg)
}

// Warnlog mocks base method.
func (m *MockILogger) Warnlog(msg string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Warnlog", msg)
}

// Warnlog indicates an expected call of Warnlog.
func (mr *MockILoggerMockRecorder) Warnlog(msg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Warnlog", reflect.TypeOf((*MockILogger)(nil).Warnlog), msg)
}
